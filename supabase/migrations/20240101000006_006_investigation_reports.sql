-- Migration: 006_investigation_reports.sql
-- Description: Create investigation_reports table for storing analysis results
-- Created: 2024-01-01

-- Create investigation_reports table
CREATE TABLE investigation_reports (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    command_id UUID NOT NULL REFERENCES commands(id) ON DELETE CASCADE,
    agent_id UUID NOT NULL REFERENCES agents(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    summary TEXT NOT NULL,
    findings JSONB NOT NULL,
    recommendations TEXT[],
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    -- Constraints
    CONSTRAINT investigation_reports_title_length CHECK (char_length(title) >= 1 AND char_length(title) <= 200),
    CONSTRAINT investigation_reports_summary_length CHECK (char_length(summary) >= 1 AND char_length(summary) <= 5000),
    CONSTRAINT investigation_reports_findings_not_null CHECK (findings IS NOT NULL),
    CONSTRAINT investigation_reports_recommendations_count CHECK (
        recommendations IS NULL OR array_length(recommendations, 1) <= 20
    )
);

-- Add comments
COMMENT ON TABLE investigation_reports IS 'Investigation reports generated by AI agents';
COMMENT ON COLUMN investigation_reports.command_id IS 'Reference to the command that triggered this investigation';
COMMENT ON COLUMN investigation_reports.agent_id IS 'Reference to the agent that conducted the investigation';
COMMENT ON COLUMN investigation_reports.title IS 'Title of the investigation report';
COMMENT ON COLUMN investigation_reports.summary IS 'Executive summary of findings';
COMMENT ON COLUMN investigation_reports.findings IS 'Detailed findings as structured JSON';
COMMENT ON COLUMN investigation_reports.recommendations IS 'List of actionable recommendations';

-- Create indexes
CREATE INDEX idx_investigation_reports_command_id ON investigation_reports (command_id);
CREATE INDEX idx_investigation_reports_agent_id ON investigation_reports (agent_id);
CREATE INDEX idx_investigation_reports_created_at ON investigation_reports (created_at DESC);

-- Full-text search index
CREATE INDEX idx_investigation_reports_text_search ON investigation_reports
    USING gin(to_tsvector('english', title || ' ' || summary));

-- GIN index for findings search
CREATE INDEX idx_investigation_reports_findings_search ON investigation_reports USING gin(findings);

-- Enable Row Level Security
ALTER TABLE investigation_reports ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Allow authenticated users to view investigation reports" ON investigation_reports
    FOR SELECT TO authenticated
    USING (true);

CREATE POLICY "Allow authenticated users to insert investigation reports" ON investigation_reports
    FOR INSERT TO authenticated
    WITH CHECK (true);

CREATE POLICY "Allow authenticated users to update investigation reports" ON investigation_reports
    FOR UPDATE TO authenticated
    USING (true);

CREATE POLICY "Allow authenticated users to delete investigation reports" ON investigation_reports
    FOR DELETE TO authenticated
    USING (true);

-- Grant permissions
GRANT ALL ON investigation_reports TO authenticated;
GRANT ALL ON investigation_reports TO service_role;

-- Create function to search investigation reports
CREATE OR REPLACE FUNCTION search_investigation_reports(
    search_text TEXT,
    agent_filter UUID DEFAULT NULL,
    limit_count INTEGER DEFAULT 50
)
RETURNS TABLE (
    id UUID,
    command_id UUID,
    agent_id UUID,
    title TEXT,
    summary TEXT,
    findings JSONB,
    recommendations TEXT[],
    created_at TIMESTAMPTZ,
    rank REAL
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        ir.id,
        ir.command_id,
        ir.agent_id,
        ir.title,
        ir.summary,
        ir.findings,
        ir.recommendations,
        ir.created_at,
        ts_rank(
            to_tsvector('english', ir.title || ' ' || ir.summary),
            plainto_tsquery('english', search_text)
        ) as rank
    FROM investigation_reports ir
    WHERE
        to_tsvector('english', ir.title || ' ' || ir.summary) @@ plainto_tsquery('english', search_text)
        AND (agent_filter IS NULL OR ir.agent_id = agent_filter)
    ORDER BY rank DESC, ir.created_at DESC
    LIMIT limit_count;
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER;

-- Create function for cleanup of old investigation reports (retention policy)
CREATE OR REPLACE FUNCTION cleanup_old_investigation_reports()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    -- Delete investigation reports older than 30 days
    DELETE FROM investigation_reports
    WHERE created_at < NOW() - INTERVAL '30 days';

    GET DIAGNOSTICS deleted_count = ROW_COUNT;

    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;